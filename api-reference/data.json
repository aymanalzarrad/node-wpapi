{
    "project": {
        "name": "wpapi",
        "description": "An isomorphic JavaScript client for interacting with the WordPress REST API",
        "version": "1.0.2",
        "url": "https://github.com/wp-api/node-wpapi"
    },
    "files": {
        "lib/constructors/wp-request.js": {
            "name": "lib/constructors/wp-request.js",
            "modules": {
                "WPRequest": 1
            },
            "classes": {
                "WPRequest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/data/simplify-object.js": {
            "name": "lib/data/simplify-object.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/data/update-default-routes-json.js": {
            "name": "lib/data/update-default-routes-json.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/mixins/filters.js": {
            "name": "lib/mixins/filters.js",
            "modules": {
                "filters": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/mixins/index.js": {
            "name": "lib/mixins/index.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/mixins/parameters.js": {
            "name": "lib/mixins/parameters.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/util/alphanumeric-sort.js": {
            "name": "lib/util/alphanumeric-sort.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/util/apply-mixin.js": {
            "name": "lib/util/apply-mixin.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/util/argument-is-numeric.js": {
            "name": "lib/util/argument-is-numeric.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/util/check-method-support.js": {
            "name": "lib/util/check-method-support.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/util/named-group-regexp.js": {
            "name": "lib/util/named-group-regexp.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/util/object-reduce.js": {
            "name": "lib/util/object-reduce.js",
            "modules": {
                "object-reduce": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/util/parameter-setter.js": {
            "name": "lib/util/parameter-setter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/autodiscovery.js": {
            "name": "lib/autodiscovery.js",
            "modules": {
                "autodiscovery": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/endpoint-factories.js": {
            "name": "lib/endpoint-factories.js",
            "modules": {
                "parseRouteString": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/endpoint-request.js": {
            "name": "lib/endpoint-request.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/http-transport.js": {
            "name": "lib/http-transport.js",
            "modules": {
                "http-transport": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/path-part-setter.js": {
            "name": "lib/path-part-setter.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/resource-handler-spec.js": {
            "name": "lib/resource-handler-spec.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/route-tree.js": {
            "name": "lib/route-tree.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/wp-register-route.js": {
            "name": "lib/wp-register-route.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "Gruntfile.js": {
            "name": "Gruntfile.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "wpapi.js": {
            "name": "wpapi.js",
            "modules": {
                "WPAPI": 1
            },
            "classes": {
                "WPAPI": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "WPAPI": {
            "name": "WPAPI",
            "submodules": {
                "WPRequest": 1
            },
            "elements": {},
            "classes": {
                "WPRequest": 1,
                "WPAPI": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "wpapi.js",
            "line": 44,
            "description": "A WP REST API client for Node.js",
            "example": [
                "\n    var wp = new WPAPI({ endpoint: 'http://src.wordpress-develop.dev/wp-json' });\n    wp.posts().then(function( posts ) {\n        console.log( posts );\n    }).catch(function( err ) {\n        console.error( err );\n    });"
            ],
            "itemtype": "main"
        },
        "WPRequest": {
            "name": "WPRequest",
            "submodules": {},
            "elements": {},
            "classes": {
                "WPRequest": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "WPAPI",
            "namespace": "",
            "file": "lib/constructors/wp-request.js",
            "line": 16,
            "description": "WPRequest is the base API request object constructor"
        },
        "filters": {
            "name": "filters",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/mixins/filters.js",
            "line": 2,
            "description": "Filter methods that can be mixed in to a request constructor's prototype to\nallow that request to take advantage of the `?filter[]=` aliases for WP_Query\nparameters for collection endpoints, when available."
        },
        "object-reduce": {
            "name": "object-reduce",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/util/object-reduce.js",
            "line": 3,
            "description": "Utility method to permit Array#reduce-like operations over objects\n\nThis is likely to be slightly more inefficient than using lodash.reduce,\nbut results in ~50kb less size in the resulting bundled code before\nminification and ~12kb of savings with minification.\n\nUnlike lodash.reduce(), the iterator and initial value properties are NOT\noptional: this is done to simplify the code, this module is not intended to\nbe a full replacement for lodash.reduce and instead prioritizes simplicity\nfor a specific common case.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "obj",
                    "description": "An object of key-value pairs",
                    "type": "Object"
                },
                {
                    "name": "iterator",
                    "description": "A function to use to reduce the object",
                    "type": "Function"
                },
                {
                    "name": "initialState",
                    "description": "The initial value to pass to the reducer function",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The result of the reduction operation"
            }
        },
        "autodiscovery": {
            "name": "autodiscovery",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/autodiscovery.js",
            "line": 1,
            "description": "Utility methods used when querying a site in order to discover its available\nAPI endpoints"
        },
        "parseRouteString": {
            "name": "parseRouteString",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/endpoint-factories.js",
            "line": 2,
            "description": "Take a WP route string (with PCRE named capture groups), such as"
        },
        "http-transport": {
            "name": "http-transport",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/http-transport.js",
            "line": 2
        }
    },
    "classes": {
        "WPRequest": {
            "name": "WPRequest",
            "shortname": "WPRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [
                "WPAPI"
            ],
            "module": "WPAPI",
            "submodule": "WPRequest",
            "namespace": "",
            "file": "lib/constructors/wp-request.js",
            "line": 16,
            "description": "WPRequest is the base API request object constructor",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "A hash of options for the WPRequest instance",
                    "type": "Object",
                    "props": [
                        {
                            "name": "endpoint",
                            "description": "The endpoint URI for the invoking WPAPI instance",
                            "type": "String"
                        },
                        {
                            "name": "transport",
                            "description": "An object of http transport methods (get, post, etc)",
                            "type": "Object"
                        },
                        {
                            "name": "username",
                            "description": "A username for authenticating API requests",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "password",
                            "description": "A password for authenticating API requests",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "nonce",
                            "description": "A WP nonce for use with cookie authentication",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "WPAPI": {
            "name": "WPAPI",
            "shortname": "WPAPI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "WPAPI",
            "namespace": "",
            "file": "wpapi.js",
            "line": 44,
            "description": "The base constructor for the WP API service",
            "itemtype": "method",
            "params": [
                {
                    "name": "namespace",
                    "description": "A namespace string, e.g. 'myplugin/v1'",
                    "type": "String"
                },
                {
                    "name": "restBase",
                    "description": "A REST route string, e.g. '/author/(?P<id>\\d+)'",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "An (optional) options object",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "mixins",
                            "description": "A hash of functions to apply as mixins",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "methods",
                            "description": "An array of methods to whitelist (on the leaf node only)",
                            "type": "String[]",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "An endpoint handler factory function for the\nspecified route",
                "type": "Function"
            },
            "is_constructor": 1,
            "uses": [
                "WPRequest"
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "lib/constructors/wp-request.js",
            "line": 29,
            "description": "Configuration options for the request",
            "itemtype": "property",
            "name": "_options",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "default": "{}",
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 51,
            "description": "The HTTP transport methods (.get, .post, .put, .delete, .head) to use for this request",
            "itemtype": "property",
            "name": "transport",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 60,
            "description": "A hash of query parameters\nThis is used to store the values for supported query parameters like ?_embed",
            "itemtype": "property",
            "name": "_params",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "default": "{}",
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 71,
            "description": "Methods supported by this API request instance:\nIndividual endpoint handlers specify their own subset of supported methods",
            "itemtype": "property",
            "name": "_supportedMethods",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "default": "[ 'head', 'get', 'put', 'post', 'delete' ]",
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 82,
            "description": "A hash of values to assemble into the API request path\n(This will be overwritten by each specific endpoint handler constructor)",
            "itemtype": "property",
            "name": "_path",
            "type": "Object",
            "access": "private",
            "tagname": "",
            "default": "{}",
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 97,
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 102,
            "description": "Process arrays of taxonomy terms into query parameters.\nAll terms listed in the arrays will be required (AND behavior).\n\nThis method will not be called with any values unless we are handling\nan endpoint with the filter mixin; however, since parameter handling\n(and therefore `_renderQuery()`) are part of WPRequest itself, this\nhelper method lives here alongside the code where it is used.",
            "example": [
                "\n    prepareTaxonomies({\n        tag: [ 'tag1 ', 'tag2' ], // by term slug\n        cat: [ 7 ] // by term ID\n    }) === {\n        tag: 'tag1+tag2',\n        cat: '7'\n    }"
            ],
            "params": [
                {
                    "name": "taxonomyFilters",
                    "description": "An object of taxonomy term arrays, keyed by taxonomy name",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "An object of prepareFilters-ready query arg and query param value pairs",
                "type": "Object"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 139,
            "description": "Return an object with any properties with undefined, null or empty string\nvalues removed.",
            "example": [
                "\n\n    populated({\n      a: 'a',\n      b: '',\n      c: null\n    }); // { a: 'a' }"
            ],
            "params": [
                {
                    "name": "obj",
                    "description": "An object of key/value pairs",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "That object with all empty values removed",
                "type": "Object"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 166,
            "description": "Assert whether a provided URL component is \"valid\" by checking it against\nan array of registered path component validator methods for that level of\nthe URL path.",
            "params": [
                {
                    "name": "levelDefinitions",
                    "description": "An array of Level Definition objects",
                    "type": "Object[]"
                },
                {
                    "name": "levelContents",
                    "description": "The URL path string that has been specified\n                                   for use on the provided level",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Whether the provided input matches any of the provided\nlevel validation functions",
                "type": "Boolean"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 205,
            "description": "Process the endpoint query's filter objects into a valid query string.\nNested objects and Array properties are rendered with indexed array syntax.",
            "example": [
                "\n    _renderQuery({ p1: 'val1', p2: 'val2' });  // ?p1=val1&p2=val2\n    _renderQuery({ obj: { prop: 'val' } });    // ?obj[prop]=val\n    _renderQuery({ arr: [ 'val1', 'val2' ] }); // ?arr[0]=val1&arr[1]=val2"
            ],
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_renderQuery",
            "return": {
                "description": "A query string representing the specified filter parameters",
                "type": "String"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 242,
            "description": "Validate & assemble a path string from the request object's _path",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_renderPath",
            "return": {
                "description": "The rendered path",
                "type": "String"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 278,
            "description": "Parse the request into a WordPress API request URI string",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "The URI for the HTTP request to be sent",
                "type": "String"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 294,
            "description": "Set a component of the resource URL itself (as opposed to a query parameter)\n\nIf a path component has already been set at this level, throw an error:\nrequests are meant to be transient, so any re-writing of a previously-set\npath part value is likely to be a mistake.",
            "itemtype": "method",
            "name": "setPathPart",
            "chainable": 1,
            "params": [
                {
                    "name": "level",
                    "description": "A \"level\" of the path to set, e.g. \"1\" or \"2\"",
                    "type": "Number|String"
                },
                {
                    "name": "val",
                    "description": "The value to set at that path part level",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "The WPRequest instance (for chaining)",
                "type": "WPRequest"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 316,
            "description": "Validate whether the specified path parts are valid for this endpoint\n\n\"Path parts\" are non-query-string URL segments, like \"some\" \"path\" in the URL\n`mydomain.com/some/path?and=a&query=string&too`. Because a well-formed path\nis necessary to execute a successful API request, we throw an error if the\nuser has omitted a value (such as `/some/[missing component]/url`) or has\nprovided a path part value that does not match the regular expression the\nAPI uses to goven that segment.",
            "itemtype": "method",
            "name": "validatePath",
            "chainable": 1,
            "return": {
                "description": "The WPRequest instance (for chaining), if no errors were found",
                "type": "WPRequest"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 371,
            "description": "Set a parameter to render into the final query URI.",
            "itemtype": "method",
            "name": "param",
            "chainable": 1,
            "params": [
                {
                    "name": "props",
                    "description": "The name of the parameter to set, or an object containing\n                             parameter keys and their corresponding values",
                    "type": "String|Object"
                },
                {
                    "name": "value",
                    "description": "The value of the parameter being set",
                    "type": "String|Number|Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The WPRequest instance (for chaining)",
                "type": "WPRequest"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 412,
            "description": "Set the context of the request. Used primarily to expose private values on a\nrequest object by setting the context to \"edit\".",
            "itemtype": "method",
            "name": "context",
            "chainable": 1,
            "params": [
                {
                    "name": "context",
                    "description": "The context to set on the request",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The WPRequest instance (for chaining)",
                "type": "WPRequest"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 423,
            "description": "Convenience wrapper for `.context( 'edit' )`",
            "itemtype": "method",
            "name": "edit",
            "chainable": 1,
            "return": {
                "description": "The WPRequest instance (for chaining)",
                "type": "WPRequest"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 434,
            "description": "Return embedded resources as part of the response payload.",
            "itemtype": "method",
            "name": "embed",
            "chainable": 1,
            "return": {
                "description": "The WPRequest instance (for chaining)",
                "type": "WPRequest"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 448,
            "description": "Set the pagination of a request. Use in conjunction with `.perPage()` for explicit\npagination handling. (The number of pages in a response can be retrieved from the\nresponse's `_paging.totalPages` property.)",
            "itemtype": "method",
            "name": "page",
            "chainable": 1,
            "params": [
                {
                    "name": "pageNumber",
                    "description": "The page number of results to retrieve",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 460,
            "description": "Set the number of items to be returned in a page of responses.",
            "itemtype": "method",
            "name": "perPage",
            "chainable": 1,
            "params": [
                {
                    "name": "itemsPerPage",
                    "description": "The number of items to return in one page of results",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 470,
            "description": "Set an arbitrary offset to retrieve items from a specific point in a collection.",
            "itemtype": "method",
            "name": "offset",
            "chainable": 1,
            "params": [
                {
                    "name": "offsetNumber",
                    "description": "The number of items by which to offset the response",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 480,
            "description": "Change the sort direction of a returned collection",
            "example": [
                " order comments chronologically (oldest first)\n\n    site.comments().order( 'asc' )..."
            ],
            "itemtype": "method",
            "name": "order",
            "chainable": 1,
            "params": [
                {
                    "name": "direction",
                    "description": "The order to use when sorting the response",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 494,
            "description": "Order a collection by a specific field",
            "itemtype": "method",
            "name": "orderby",
            "chainable": 1,
            "params": [
                {
                    "name": "field",
                    "description": "The field by which to order the response",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 504,
            "description": "Filter results to those matching the specified search terms.",
            "itemtype": "method",
            "name": "search",
            "chainable": 1,
            "params": [
                {
                    "name": "searchString",
                    "description": "A string to search for within post content",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 514,
            "description": "Include specific resource IDs in the response collection.",
            "itemtype": "method",
            "name": "include",
            "chainable": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "An ID or array of IDs to include",
                    "type": "Number|Number[]"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 524,
            "description": "Exclude specific resource IDs in the response collection.",
            "itemtype": "method",
            "name": "exclude",
            "chainable": 1,
            "params": [
                {
                    "name": "ids",
                    "description": "An ID or array of IDs to exclude",
                    "type": "Number|Number[]"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 534,
            "description": "Query a collection for members with a specific slug.",
            "itemtype": "method",
            "name": "slug",
            "chainable": 1,
            "params": [
                {
                    "name": "slug",
                    "description": "A post slug (slug), e.g. \"hello-world\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 550,
            "description": "Set the namespace of the request, e.g. to specify the API root for routes\nregistered by wp core v2 (\"wp/v2\") or by any given plugin. Any previously-\nset namespace will be overwritten by subsequent calls to the method.",
            "itemtype": "method",
            "name": "namespace",
            "chainable": 1,
            "params": [
                {
                    "name": "namespace",
                    "description": "A namespace string, e.g. \"wp/v2\"",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The WPRequest instance (for chaining)",
                "type": "WPRequest"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 565,
            "description": "Set a request to use authentication, and optionally provide auth credentials\n\nIf auth credentials were already specified when the WPAPI instance was created, calling\n`.auth` on the request chain will set that request to use the existing credentials:",
            "example": [
                " use existing credentials\n\n    request.auth().get...\n\nAlternatively, a username & password (or nonce) can be explicitly passed into `.auth`:",
                " use explicit basic authentication credentials\n\n    request.auth({\n      username: 'admin',\n      password: 'super secure'\n    }).get...",
                " use a nonce for cookie authentication\n\n    request.auth({\n      nonce: 'somenonce'\n    })..."
            ],
            "itemtype": "method",
            "name": "auth",
            "chainable": 1,
            "params": [
                {
                    "name": "credentials",
                    "description": "An object with 'username' and 'password' string\n                                       properties, or else a 'nonce' property",
                    "type": "Object",
                    "props": [
                        {
                            "name": "username",
                            "description": "A WP-API Basic HTTP Authentication username",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "password",
                            "description": "A WP-API Basic HTTP Authentication password",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "nonce",
                            "description": "A WP nonce for use with cookie authentication",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The WPRequest instance (for chaining)",
                "type": "WPRequest"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 620,
            "description": "Specify a file or a file buffer to attach to the request, for use when\ncreating a new Media item",
            "example": [
                " within a server context\n\n    wp.media()\n      // Pass .file() the file system path to a file to upload\n      .file( '/path/to/file.jpg' )\n      .create({})...",
                " within a browser context\n\n    wp.media()\n      // Pass .file() the file reference from an HTML file input\n      .file( document.querySelector( 'input[type=\"file\"]' ).files[0] )\n      .create({})..."
            ],
            "itemtype": "method",
            "name": "file",
            "params": [
                {
                    "name": "file",
                    "description": "A path to a file (in Node) or an file object\n                              (Node or Browser) to attach to the request",
                    "type": "String|object"
                },
                {
                    "name": "name",
                    "description": "An (optional) filename to use for the file",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 655,
            "description": "Get (download the data for) the specified resource",
            "itemtype": "method",
            "name": "get",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "A callback to invoke with the results of the GET request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise to the results of the HTTP request",
                "type": "Promise"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 667,
            "description": "Get the headers for the specified resource",
            "itemtype": "method",
            "name": "headers",
            "async": 1,
            "params": [
                {
                    "name": "callback",
                    "description": "A callback to invoke with the results of the HEAD request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise to the header results of the HTTP request",
                "type": "Promise"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 679,
            "description": "Create the specified resource with the provided data\n\nThis is the public interface for creating POST requests",
            "itemtype": "method",
            "name": "create",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "The data for the POST request",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "A callback to invoke with the results of the POST request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise to the results of the HTTP request",
                "type": "Promise"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 694,
            "description": "Update the specified resource with the provided data\n\nThis is the public interface for creating PUT requests",
            "itemtype": "method",
            "name": "update",
            "async": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "data",
                    "description": "The data for the PUT request",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "A callback to invoke with the results of the PUT request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise to the results of the HTTP request",
                "type": "Promise"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 710,
            "description": "Delete the specified resource",
            "itemtype": "method",
            "name": "delete",
            "async": 1,
            "params": [
                {
                    "name": "data",
                    "description": "Data to send along with the DELETE request",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "A callback to invoke with the results of the DELETE request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise to the results of the HTTP request",
                "type": "Promise"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/constructors/wp-request.js",
            "line": 723,
            "description": "Calling .then on a query chain will invoke the query as a GET and return a promise",
            "itemtype": "method",
            "name": "then",
            "async": 1,
            "params": [
                {
                    "name": "successCallback",
                    "description": "A callback to handle the data returned from the GET request",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "failureCallback",
                    "description": "A callback to handle any errors encountered by the request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise to the results of the HTTP request",
                "type": "Promise"
            },
            "class": "WPRequest",
            "module": "WPAPI",
            "submodule": "WPRequest"
        },
        {
            "file": "lib/data/simplify-object.js",
            "line": 5,
            "description": "Walk through the keys and values of a provided object, removing any properties\nwhich would be inessential to the generation of the route tree used to deduce\nroute handlers from a `wp-json/` root API endpoint. This module is not used by\nthe wpapi module itself, but is rather a dependency of the script that is used\nto create the `endpoint-response.json` file that is shipped along with this\nmodule for use in generating the \"default\" routes.",
            "params": [
                {
                    "name": "obj",
                    "description": "An arbitrary JS value, probably an object",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The passed-in value, with non-essential args properties and all\n_links properties removes.",
                "type": "*"
            },
            "class": "WPAPI",
            "module": "WPAPI"
        },
        {
            "file": "lib/data/update-default-routes-json.js",
            "line": 6,
            "description": "To avoid requiring that auto-discovery be utilized every time the API client\nis initialized, this library ships with a built-in route definition from a\nvanilla WordPress REST API installation. That file may be updated by\ninstalling the API plugin on a clean WP development instance, with no other\nplugins running, and downloading the JSON output from `yourwpsite.com/wp-json/`\ninto the \"default-routes.json\" file in this directory.\n\nThat file can also be generated by running this script against the same live\nWP REST API instance to download that same file, the difference being that,\nif the `default-routes.json` file is downloaded through this script, it\nwill be run through the `simplifyObject` utility to cut out about 1/3 of the\nbytes of the response by removing properties that do not effect route generation.\n\nThis script is NOT intended to be a dependency of any part of wp.js, and is\nprovided purely as a utility for upgrading the built-in copy of the endpoint\nresponse JSON file that is used to bootstrap the default route handlers.",
            "example": [
                "\n\n    # Invoke directly, run against default endpoint (details below)\n    ./update-default-routes-json.js\n\n    # Invoke with `node` CLI, run against default endpoint\n    node ./update-default-routes-json --endpoint=http://my-site.com/wp-json\n\nThis script runs against http://wpapi.loc/wp-json by default, but it can be\nrun against an arbitrary WordPress REST API endpoint by passing the --endpoint\nargument on the CLI:",
                "\n\n    # Invoke directly, run against an arbitrary WordPress API root\n    ./update-default-routes-json.js --endpoint=http://my-site.com/wp-json\n\n    # Invoke with `node` CLI, run against an arbitrary WordPress API root\n    node ./update-default-routes-json --endpoint=http://my-site.com/wp-json\n\nEither form will update the `default-routes.json` file in this directory,\nproviding that the endpoint data is downloaded successfully.\n\nThis script also has some utility for downloading a custom JSON file for your\nown WP REST API-enabled site, so that you can bootstrap your own routes without\nincurring an HTTP request. To output to a different directory than the default\n(which is this directory, `lib/data/`), pass an --output argument on the CLI:",
                "\n\n    # Output to your current working directory\n    ./path/to/this/dir/update-default-routes-json.js --output=.\n\n    # Output to an arbitrary absolute path\n    ./path/to/this/dir/update-default-routes-json.js --output=/home/mordor/output.json\n\nThese command-line flags may be combined, and you will usually want to use\n--endpoint alongside --output to download your own JSON into your own directory."
            ],
            "class": "WPAPI",
            "module": "WPAPI"
        },
        {
            "file": "lib/mixins/filters.js",
            "line": 20,
            "description": "Specify key-value pairs by which to filter the API results (commonly used\nto retrieve only posts meeting certain criteria, such as posts within a\nparticular category or by a particular author).",
            "example": [
                "\n    // Set a single property:\n    wp.filter( 'post_type', 'cpt_event' )...\n\n    // Set multiple properties at once:\n    wp.filter({\n        post_status: 'publish',\n        category_name: 'news'\n    })...\n\n    // Chain calls to .filter():\n    wp.filter( 'post_status', 'publish' ).filter( 'category_name', 'news' )..."
            ],
            "itemtype": "method",
            "name": "filter",
            "chainable": 1,
            "params": [
                {
                    "name": "props",
                    "description": "A filter property name string, or object of name/value pairs",
                    "type": "String|Object"
                },
                {
                    "name": "value",
                    "description": "The value(s) corresponding to the provided filter property",
                    "type": "String|Number|Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/filters.js",
            "line": 62,
            "description": "Restrict the query results to posts matching one or more taxonomy terms.",
            "itemtype": "method",
            "name": "taxonomy",
            "chainable": 1,
            "params": [
                {
                    "name": "taxonomy",
                    "description": "The name of the taxonomy to filter by",
                    "type": "String"
                },
                {
                    "name": "term",
                    "description": "A string or integer, or array thereof, representing terms",
                    "type": "String|Number|Array"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/filters.js",
            "line": 121,
            "description": "Query for posts published in a given year.",
            "itemtype": "method",
            "name": "year",
            "chainable": 1,
            "params": [
                {
                    "name": "year",
                    "description": "integer representation of year requested",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/filters.js",
            "line": 134,
            "description": "Query for posts published in a given month, either by providing the number\nof the requested month (e.g. 3), or the month's name as a string (e.g. \"March\")",
            "itemtype": "method",
            "name": "month",
            "chainable": 1,
            "params": [
                {
                    "name": "month",
                    "description": "Integer for month (1) or month string (\"January\")",
                    "type": "Number|String"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/filters.js",
            "line": 167,
            "description": "Add the day filter into the request to retrieve posts for a given day",
            "itemtype": "method",
            "name": "day",
            "chainable": 1,
            "params": [
                {
                    "name": "day",
                    "description": "Integer representation of the day requested",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/filters.js",
            "line": 180,
            "description": "Specify that we are requesting a page by its path (specific to Page resources)",
            "itemtype": "method",
            "name": "path",
            "chainable": 1,
            "params": [
                {
                    "name": "path",
                    "description": "The root-relative URL path for a page",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/index.js",
            "line": 1,
            "description": "This module defines a mapping between supported GET request query parameter\narguments and their corresponding mixin, if available.",
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/index.js",
            "line": 21,
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/index.js",
            "line": 29,
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/index.js",
            "line": 38,
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/parameters.js",
            "line": 25,
            "description": "Query for posts by a specific author.\nThis method will replace any previous 'author' query parameters that had been set.\n\n_Usage with the author nicename string is deprecated._ Query by author ID instead.\n\nNote that this method will either set the \"author\" top-level query parameter,\nor else the \"author_name\" filter parameter (when querying by nicename): this is\nirregular as most parameter helper methods either set a top level parameter or a\nfilter, not both.",
            "itemtype": "method",
            "name": "author",
            "chainable": 1,
            "params": [
                {
                    "name": "author",
                    "description": "The nicename or ID for a particular author",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/parameters.js",
            "line": 61,
            "description": "Search for hierarchical taxonomy terms that are children of the parent term\nindicated by the provided term ID",
            "example": [
                "\n\n    wp.pages().parent( 3 ).then(function( pages ) {\n      // console.log( 'all of these pages are nested below page ID#3:' );\n      // console.log( pages );\n    });\n\n    wp.categories().parent( 42 ).then(function( categories ) {\n      console.log( 'all of these categories are sub-items of cat ID#42:' );\n      console.log( categories );\n    });"
            ],
            "itemtype": "method",
            "name": "parent",
            "chainable": 1,
            "params": [
                {
                    "name": "parentId",
                    "description": "The ID of a (hierarchical) taxonomy term",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/parameters.js",
            "line": 84,
            "description": "Specify the post for which to retrieve terms (relevant for *e.g.* taxonomy\nand comment collection endpoints).",
            "itemtype": "method",
            "name": "post",
            "chainable": 1,
            "params": [
                {
                    "name": "post",
                    "description": "The ID of the post for which to retrieve terms",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/parameters.js",
            "line": 95,
            "description": "Specify the password to use to access the content of a password-protected post",
            "itemtype": "method",
            "name": "password",
            "chainable": 1,
            "params": [
                {
                    "name": "password",
                    "description": "A string password to access protected content within a post",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/parameters.js",
            "line": 105,
            "description": "Specify for which post statuses to return posts in a response collection\n\nSee https://codex.wordpress.org/Post_Status -- the default post status\nvalues in WordPress which are most relevant to the API are 'publish',\n'future', 'draft', 'pending', 'private', and 'trash'. This parameter also\nsupports passing the special value \"any\" to return all statuses.",
            "itemtype": "method",
            "name": "status",
            "chainable": 1,
            "params": [
                {
                    "name": "status",
                    "description": "A status name string or array of strings",
                    "type": "String|string[]"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/parameters.js",
            "line": 120,
            "description": "Specify whether to return only, or to completely exclude, sticky posts",
            "itemtype": "method",
            "name": "sticky",
            "chainable": 1,
            "params": [
                {
                    "name": "sticky",
                    "description": "A boolean value for whether ONLY sticky posts (true) or\n                        NO sticky posts (false) should be returned in the query",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/parameters.js",
            "line": 134,
            "description": "Retrieve only records associated with one of the provided categories",
            "itemtype": "method",
            "name": "categories",
            "chainable": 1,
            "params": [
                {
                    "name": "categories",
                    "description": "A term ID integer or numeric string, or array thereof",
                    "type": "String|Number|Array"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/parameters.js",
            "line": 144,
            "description": "Legacy wrapper for `.categories()` that uses `?filter` to query by slug if available",
            "itemtype": "method",
            "name": "tag",
            "deprecated": true,
            "deprecationMessage": "Use `.categories()` and query by category IDs",
            "chainable": 1,
            "params": [
                {
                    "name": "tag",
                    "description": "A category term slug string, numeric ID, or array of numeric IDs",
                    "type": "String|Number|Array"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/parameters.js",
            "line": 161,
            "description": "Exclude records associated with any of the provided category IDs",
            "itemtype": "method",
            "name": "excludeCategories",
            "chainable": 1,
            "params": [
                {
                    "name": "category",
                    "description": "A term ID integer or numeric string, or array thereof",
                    "type": "String|Number|Array"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/parameters.js",
            "line": 171,
            "description": "Retrieve only records associated with one of the provided tag IDs",
            "itemtype": "method",
            "name": "tags",
            "chainable": 1,
            "params": [
                {
                    "name": "tags",
                    "description": "A term ID integer or numeric string, or array thereof",
                    "type": "String|Number|Array"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/parameters.js",
            "line": 181,
            "description": "Legacy wrapper for `.tags()` that uses `?filter` to query by slug if available",
            "itemtype": "method",
            "name": "tag",
            "deprecated": true,
            "deprecationMessage": "Use `.tags()` and query by term IDs",
            "chainable": 1,
            "params": [
                {
                    "name": "tag",
                    "description": "A tag term slug string, numeric ID, or array of numeric IDs",
                    "type": "String|Number|Array"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/parameters.js",
            "line": 198,
            "description": "Exclude records associated with any of the provided tag IDs",
            "itemtype": "method",
            "name": "excludeTags",
            "chainable": 1,
            "params": [
                {
                    "name": "category",
                    "description": "A term ID integer or numeric string, or array thereof",
                    "type": "String|Number|Array"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/parameters.js",
            "line": 211,
            "description": "Retrieve only records published before a specified date",
            "example": [
                " Provide an ISO 8601-compliant date string\n\n    wp.posts().before('2016-03-22')...",
                " Provide a JavaScript Date object\n\n    wp.posts().before( new Date( 2016, 03, 22 ) )..."
            ],
            "itemtype": "method",
            "name": "before",
            "chainable": 1,
            "params": [
                {
                    "name": "date",
                    "description": "An ISO 8601-compliant date string, or Date object",
                    "type": "String|Date"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/mixins/parameters.js",
            "line": 232,
            "description": "Retrieve only records published after a specified date",
            "example": [
                " Provide an ISO 8601-compliant date string\n\n    wp.posts().after('1986-03-22')...",
                " Provide a JavaScript Date object\n\n    wp.posts().after( new Date( 1986, 03, 22 ) )..."
            ],
            "itemtype": "method",
            "name": "after",
            "chainable": 1,
            "params": [
                {
                    "name": "date",
                    "description": "An ISO 8601-compliant date string, or Date object",
                    "type": "String|Date"
                }
            ],
            "return": {
                "description": "The request instance (for chaining)"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/util/alphanumeric-sort.js",
            "line": 3,
            "description": "Utility function for sorting arrays of numbers or strings.",
            "params": [
                {
                    "name": "a",
                    "description": "The first comparator operand",
                    "type": "String|Number"
                },
                {
                    "name": "a",
                    "description": "The second comparator operand",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "-1 if the values are backwards, 1 if they're ordered, and 0 if they're the same"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/util/apply-mixin.js",
            "line": 3,
            "description": "Augment an object (specifically a prototype) with a mixin method\n(the provided object is mutated by reference)",
            "params": [
                {
                    "name": "obj",
                    "description": "The object (usually a prototype) to augment",
                    "type": "Object"
                },
                {
                    "name": "key",
                    "description": "The property to which the mixin method should be assigned",
                    "type": "String"
                },
                {
                    "name": "mixin",
                    "description": "The mixin method",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/util/argument-is-numeric.js",
            "line": 3,
            "description": "Return true if the provided argument is a number, a numeric string, or an\narray of numbers or numeric strings",
            "params": [
                {
                    "name": "val",
                    "description": "The value to inspect",
                    "type": "Number|String|Number[]|String[]"
                },
                {
                    "name": "key",
                    "description": "The property to which the mixin method should be assigned",
                    "type": "String"
                },
                {
                    "name": "mixin",
                    "description": "The mixin method",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Void"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/util/check-method-support.js",
            "line": 3,
            "description": "Verify that a specific HTTP method is supported by the provided WPRequest",
            "params": [
                {
                    "name": "method",
                    "description": "An HTTP method to check ('get', 'post', etc)",
                    "type": "String"
                },
                {
                    "name": "request",
                    "description": "A WPRequest object with a _supportedMethods array",
                    "type": "WPRequest"
                }
            ],
            "return": {
                "description": "true iff the method is within request._supportedMethods"
            },
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/util/named-group-regexp.js",
            "line": 3,
            "description": "Regular Expression to identify a capture group in PCRE formats\n`(?<name>regex)`, `(?'name'regex)` or `(?P<name>regex)` (see\nregular-expressions.info/refext.html); RegExp is built as a string\nto enable more detailed annotation.",
            "type": "{RegExp}",
            "class": "WPAPI",
            "module": "filters"
        },
        {
            "file": "lib/util/parameter-setter.js",
            "line": 3,
            "description": "Helper to create a simple parameter setter convenience method",
            "params": [
                {
                    "name": "param",
                    "description": "The string key of the parameter this method will set",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A setter method that can be assigned to a request instance",
                "type": "Function"
            },
            "class": "WPAPI",
            "module": "object-reduce"
        },
        {
            "file": "lib/util/parameter-setter.js",
            "line": 10,
            "description": "A setter for a specific parameter",
            "chainable": 1,
            "params": [
                {
                    "name": "val",
                    "description": "The value to set for the the parameter",
                    "type": "*"
                }
            ],
            "return": {
                "description": "The request instance on which this method was called (for chaining)"
            },
            "class": "WPAPI",
            "module": "object-reduce"
        },
        {
            "file": "lib/endpoint-factories.js",
            "line": 12,
            "description": "Given an array of route definitions and a specific namespace for those routes,\nrecurse through the node tree representing all possible routes within the\nprovided namespace to define path value setters (and corresponding property\nvalidators) for all possible variants of each resource's API endpoints.",
            "params": [
                {
                    "name": "namespace",
                    "description": "The namespace string for these routes",
                    "type": "String"
                },
                {
                    "name": "routesByNamespace",
                    "description": "A dictionary of namespace - route definition\n                                  object pairs as generated from buildRouteTree,\n                                  where each route definition object is a dictionary\n                                  keyed by route definition strings",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A dictionary of endpoint request handler factories",
                "type": "Object"
            },
            "class": "WPAPI",
            "module": "parseRouteString"
        },
        {
            "file": "lib/endpoint-request.js",
            "line": 15,
            "description": "Semi-private instance property specifying the available URL path options\nfor this endpoint request handler, keyed by ascending whole numbers.",
            "itemtype": "property",
            "name": "_levels",
            "type": "{object}",
            "access": "private",
            "tagname": "",
            "class": "WPAPI",
            "module": "parseRouteString"
        },
        {
            "file": "lib/http-transport.js",
            "line": 17,
            "description": "Conditionally set basic authentication on a server request object",
            "itemtype": "method",
            "name": "_auth",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "request",
                    "description": "A superagent request object",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "A WPRequest _options object",
                    "type": "Object"
                },
                {
                    "name": "forceAuthentication",
                    "description": "whether to force authentication on the request",
                    "type": "Boolean"
                },
                {
                    "name": "A",
                    "description": "superagent request object, conditionally configured to use basic auth",
                    "type": "Object"
                }
            ],
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/http-transport.js",
            "line": 55,
            "description": "Combine the API endpoint root URI and link URI into a valid request URL.\nEndpoints are generally a full path to the JSON API's root endpoint, such\nas `website.com/wp-json`: the link headers, however, are returned as root-\nrelative paths. Concatenating these would generate a URL such as\n`website.com/wp-json/wp-json/posts?page=2`: we must intelligently merge the\nURI strings in order to generate a valid new request URL.",
            "params": [
                {
                    "name": "endpoint",
                    "description": "The endpoint URL for the REST API root",
                    "type": "String"
                },
                {
                    "name": "linkPath",
                    "description": "A root-relative link path to an API request",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The full URL path to the provided link",
                "type": "String"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/http-transport.js",
            "line": 81,
            "description": "If the response is not paged, return the body as-is. If pagination\ninformation is present in the response headers, parse those headers into\na custom `_paging` property on the response body. `_paging` contains links\nto the previous and next pages in the collection, as well as metadata\nabout the size and number of pages in the collection.\n\nThe structure of the `_paging` property is as follows:\n\n- `total` {Integer} The total number of records in the collection\n- `totalPages` {Integer} The number of pages available\n- `links` {Object} The parsed \"links\" headers, separated into individual URI strings\n- `next` {WPRequest} A WPRequest object bound to the \"next\" page (if page exists)\n- `prev` {WPRequest} A WPRequest object bound to the \"previous\" page (if page exists)",
            "params": [
                {
                    "name": "result",
                    "description": "The response object from the HTTP request",
                    "type": "Object"
                },
                {
                    "name": "endpoint",
                    "description": "The base URL of the requested API endpoint",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The body of the HTTP request, conditionally augmented with\n                  pagination metadata",
                "type": "Object"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/http-transport.js",
            "line": 146,
            "description": "Submit the provided superagent request object, invoke a callback (if it was\nprovided), and return a promise to the response from the HTTP request.",
            "params": [
                {
                    "name": "request",
                    "description": "A superagent request object",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "A callback function (optional)",
                    "type": "Function"
                },
                {
                    "name": "transform",
                    "description": "A function to transform the result data",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A promise to the superagent request",
                "type": "Promise"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/http-transport.js",
            "line": 195,
            "description": "Return the body of the request, augmented with pagination information if the\nresult is a paged collection.",
            "itemtype": "method",
            "name": "returnBody",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "wpreq",
                    "description": "The WPRequest representing the returned HTTP response",
                    "type": "WPRequest"
                },
                {
                    "name": "result",
                    "description": "The results from the HTTP request",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The \"body\" property of the result, conditionally augmented with\n                 pagination information if the result is a partial collection.",
                "type": "Object"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/http-transport.js",
            "line": 212,
            "description": "Extract and return the headers property from a superagent response object",
            "params": [
                {
                    "name": "result",
                    "description": "The results from the HTTP request",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The \"headers\" property of the result",
                "type": "Object"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/http-transport.js",
            "line": 225,
            "itemtype": "method",
            "name": "_httpGet",
            "async": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "wpreq",
                    "description": "A WPRequest query object",
                    "type": "WPRequest"
                },
                {
                    "name": "callback",
                    "description": "A callback to invoke with the results of the GET request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise to the results of the HTTP request",
                "type": "Promise"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/http-transport.js",
            "line": 242,
            "description": "Invoke an HTTP \"POST\" request against the provided endpoint",
            "itemtype": "method",
            "name": "_httpPost",
            "async": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "wpreq",
                    "description": "A WPRequest query object",
                    "type": "WPRequest"
                },
                {
                    "name": "data",
                    "description": "The data for the POST request",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "A callback to invoke with the results of the POST request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise to the results of the HTTP request",
                "type": "Promise"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/http-transport.js",
            "line": 270,
            "itemtype": "method",
            "name": "_httpPut",
            "async": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "wpreq",
                    "description": "A WPRequest query object",
                    "type": "WPRequest"
                },
                {
                    "name": "data",
                    "description": "The data for the PUT request",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "A callback to invoke with the results of the PUT request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise to the results of the HTTP request",
                "type": "Promise"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/http-transport.js",
            "line": 289,
            "itemtype": "method",
            "name": "_httpDelete",
            "async": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "wpreq",
                    "description": "A WPRequest query object",
                    "type": "WPRequest"
                },
                {
                    "name": "data",
                    "description": "Data to send along with the DELETE request",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "A callback to invoke with the results of the DELETE request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise to the results of the HTTP request",
                "type": "Promise"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/http-transport.js",
            "line": 310,
            "itemtype": "method",
            "name": "_httpHead",
            "async": 1,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "wpreq",
                    "description": "A WPRequest query object",
                    "type": "WPRequest"
                },
                {
                    "name": "callback",
                    "description": "A callback to invoke with the results of the HEAD request",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "A promise to the header results of the HTTP request",
                "type": "Promise"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/path-part-setter.js",
            "line": 3,
            "description": "Return a function to set part of the request URL path.\n\nPath part setter methods may be either dynamic (*i.e.* may represent a\n\"named group\") or non-dynamic (representing a static part of the URL, which\nis usually a collection endpoint of some sort). Which type of function is\nreturned depends on whether a given route has one or many sub-resources.",
            "params": [
                {
                    "name": "node",
                    "description": "[description]",
                    "type": "[type]"
                }
            ],
            "return": {
                "description": "[description]",
                "type": "[type]"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/path-part-setter.js",
            "line": 30,
            "description": "Set a dymanic (named-group) path part of a query URL.",
            "example": [
                "\n\n    // id() is a dynamic path part setter:\n    wp.posts().id( 7 ); // Get posts/7"
            ],
            "chainable": 1,
            "params": [
                {
                    "name": "val",
                    "description": "The path part value to set",
                    "type": "String|Number"
                }
            ],
            "return": {
                "description": "The handler instance (for chaining)",
                "type": "Object"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/path-part-setter.js",
            "line": 51,
            "description": "Set a non-dymanic (non-named-group) path part of a query URL, and\nset the value of a subresource if an input value is provided and\nexactly one named-group child node exists.",
            "example": [
                "\n\n    // revisions() is a non-dynamic path part setter:\n    wp.posts().id( 4 ).revisions();       // Get posts/4/revisions\n    wp.posts().id( 4 ).revisions( 1372 ); // Get posts/4/revisions/1372"
            ],
            "chainable": 1,
            "params": [
                {
                    "name": "val",
                    "description": "The path part value to set (if provided)\n                              for a subresource within this resource",
                    "type": "String|Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The handler instance (for chaining)",
                "type": "Object"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/resource-handler-spec.js",
            "line": 40,
            "description": "Walk the tree of a specific resource node to create the setter methods\n\nThe API we want to produce from the node tree looks like this:\n\n    wp.posts();                        /wp/v2/posts\n    wp.posts().id( 7 );                /wp/v2/posts/7\n    wp.posts().id( 7 ).revisions();    /wp/v2/posts/7/revisions\n    wp.posts().id( 7 ).revisions( 8 ); /wp/v2/posts/7/revisions/8\n\n^ That last one's the tricky one: we can deduce that this parameter is \"id\", but\nthat param will already be taken by the post ID, so sub-collections have to be\nset up as `.revisions()` to get the collection, and `.revisions( id )` to get a\nspecific resource.",
            "params": [
                {
                    "name": "node",
                    "description": "A node object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "children",
                            "description": "An object of child nodes\n// @return {isLeaf} A boolean indicating whether the processed node is a leaf",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/resource-handler-spec.js",
            "line": 71,
            "description": "Create a node handler specification object from a route definition object",
            "params": [
                {
                    "name": "routeDefinition",
                    "description": "A route definition object",
                    "type": "Object"
                },
                {
                    "name": "resource",
                    "description": "The string key of the resource for which to create a handler",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A handler spec object with _path, _levels and _setters properties",
                "type": "Object"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/route-tree.js",
            "line": 7,
            "description": "Method to use when reducing route components array.",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "routeObj",
                    "description": "A route definition object (set via .bind partial application)",
                    "type": "Object"
                },
                {
                    "name": "topLevel",
                    "description": "The top-level route tree object for this set of routes (set\n                             via .bind partial application)",
                    "type": "Object"
                },
                {
                    "name": "parentLevel",
                    "description": "The memo object, which is mutated as the reducer adds\n                             a new level handler for each level in the route",
                    "type": "Object"
                },
                {
                    "name": "component",
                    "description": "The string defining this route component",
                    "type": "String"
                },
                {
                    "name": "idx",
                    "description": "The index of this component within the components array",
                    "type": "Number"
                },
                {
                    "name": "components",
                    "description": "The array of all components",
                    "type": "String[]"
                }
            ],
            "return": {
                "description": "The child object of the level being reduced",
                "type": "Object"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/route-tree.js",
            "line": 128,
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "namespaces",
                    "description": "The memo object that becomes a dictionary mapping API\n                              namespaces to an object of the namespace's routes",
                    "type": "Object"
                },
                {
                    "name": "routeObj",
                    "description": "A route definition object",
                    "type": "Object"
                },
                {
                    "name": "route",
                    "description": "The string key of the `routeObj` route object",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The namespaces dictionary memo object",
                "type": "Object"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "lib/route-tree.js",
            "line": 180,
            "description": "Build a route tree by reducing over a routes definition object from the API\nroot endpoint response object",
            "itemtype": "method",
            "name": "build",
            "params": [
                {
                    "name": "routes",
                    "description": "A dictionary of routes keyed by route regex strings",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A dictionary, keyed by namespace, of resource handler\nfactory methods for each namespace's resources",
                "type": "Object"
            },
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "Gruntfile.js",
            "line": 1,
            "description": "The Gruntfile in this project is not responsible for the code build or\nlinting, and instead handles all tasks related to documentation generation\nand output.",
            "class": "WPAPI",
            "module": "http-transport"
        },
        {
            "file": "wpapi.js",
            "line": 95,
            "description": "Set custom transport methods to use when making HTTP requests against the API\n\nPass an object with a function for one or many of \"get\", \"post\", \"put\",\n\"delete\" and \"head\" and that function will be called when making that type\nof request. The provided transport functions should take a WPRequest handler\ninstance (_e.g._ the result of a `wp.posts()...` chain or any other chaining\nrequest handler) as their first argument; a `data` object as their second\nargument (for POST, PUT and DELETE requests); and an optional callback as\ntheir final argument. Transport methods should invoke the callback with the\nresponse data (or error, as appropriate), and should also return a Promise.",
            "example": [
                " showing how a cache hit (keyed by URI) could short-circuit a get request\n\n    var site = new WPAPI({\n      endpoint: 'http://my-site.com/wp-json'\n    });\n\n    // Overwrite the GET behavior to inject a caching layer\n    site.transport({\n      get: function( wpreq, cb ) {\n        var result = cache[ wpreq ];\n        // If a cache hit is found, return it via the same callback/promise\n        // signature as the default transport method\n        if ( result ) {\n          if ( cb && typeof cb === 'function' ) {\n            cb( null, result );\n          }\n          return Promise.resolve( result );\n        }\n\n        // Delegate to default transport if no cached data was found\n        return WPAPI.transport.get( wpreq, cb ).then(function( result ) {\n          cache[ wpreq ] = result;\n          return result;\n        });\n      }\n    });\n\nThis is advanced behavior; you will only need to utilize this functionality\nif your application has very specific HTTP handling or caching requirements.\nRefer to the \"http-transport\" module within this application for the code\nimplementing the built-in transport methods."
            ],
            "chainable": 1,
            "params": [
                {
                    "name": "transport",
                    "description": "A dictionary of HTTP transport methods",
                    "type": "Object",
                    "props": [
                        {
                            "name": "get",
                            "description": "The function to use for GET requests",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "post",
                            "description": "The function to use for POST requests",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "put",
                            "description": "The function to use for PUT requests",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "delete",
                            "description": "The function to use for DELETE requests",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "head",
                            "description": "The function to use for HEAD requests",
                            "type": "Function",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The WPAPI instance, for chaining",
                "type": "WPAPI"
            },
            "class": "WPAPI",
            "module": "WPAPI"
        },
        {
            "file": "wpapi.js",
            "line": 167,
            "description": "Default HTTP transport methods object for all WPAPI instances\n\nThese methods may be extended or replaced on an instance-by-instance basis",
            "static": 1,
            "itemtype": "property",
            "name": "transport",
            "type": "{Object}",
            "class": "WPAPI",
            "module": "WPAPI"
        },
        {
            "file": "wpapi.js",
            "line": 179,
            "description": "Convenience method for making a new WPAPI instance",
            "example": [
                "\nThese are equivalent:\n\n    var wp = new WPAPI({ endpoint: 'http://my.blog.url/wp-json' });\n    var wp = WPAPI.site( 'http://my.blog.url/wp-json' );\n\n`WPAPI.site` can take an optional API root response JSON object to use when\nbootstrapping the client's endpoint handler methods: if no second parameter\nis provided, the client instance is assumed to be using the default API\nwith no additional plugins and is initialized with handlers for only those\ndefault API routes.",
                "\nThese are equivalent:\n\n    // {...} means the JSON output of http://my.blog.url/wp-json\n    var wp = new WPAPI({\n      endpoint: 'http://my.blog.url/wp-json',\n      json: {...}\n    });\n    var wp = WPAPI.site( 'http://my.blog.url/wp-json', {...} );"
            ],
            "itemtype": "method",
            "name": "site",
            "static": 1,
            "params": [
                {
                    "name": "endpoint",
                    "description": "The URI for a WP-API endpoint",
                    "type": "String"
                },
                {
                    "name": "routes",
                    "description": "The \"routes\" object from the JSON object returned\n                         from the root API endpoint of a WP site, which should\n                         be a dictionary of route definition objects keyed by\n                         the route's regex pattern",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A new WPAPI instance, bound to the provided endpoint",
                "type": "WPAPI"
            },
            "class": "WPAPI",
            "module": "WPAPI"
        },
        {
            "file": "wpapi.js",
            "line": 220,
            "description": "Generate a request against a completely arbitrary endpoint, with no assumptions about\nor mutation of path, filtering, or query parameters. This request is not restricted to\nthe endpoint specified during WPAPI object instantiation.",
            "example": [
                "\nGenerate a request to the explicit URL \"http://your.website.com/wp-json/some/custom/path\"\n\n    wp.url( 'http://your.website.com/wp-json/some/custom/path' ).get()..."
            ],
            "itemtype": "method",
            "name": "url",
            "params": [
                {
                    "name": "url",
                    "description": "The URL to request",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A WPRequest object bound to the provided URL",
                "type": "WPRequest"
            },
            "class": "WPAPI",
            "module": "WPAPI"
        },
        {
            "file": "wpapi.js",
            "line": 241,
            "description": "Generate a query against an arbitrary path on the current endpoint. This is useful for\nrequesting resources at custom WP-API endpoints, such as WooCommerce's `/products`.",
            "itemtype": "method",
            "name": "root",
            "params": [
                {
                    "name": "relativePath",
                    "description": "An endpoint-relative path to which to bind the request",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A request object",
                "type": "WPRequest"
            },
            "class": "WPAPI",
            "module": "WPAPI"
        },
        {
            "file": "wpapi.js",
            "line": 261,
            "description": "Set the authentication to use for a WPAPI site handler instance. Accepts basic\nHTTP authentication credentials (string username & password) or a Nonce (for\ncookie authentication) by default; may be overloaded to accept OAuth credentials\nin the future.",
            "example": [
                " Basic Authentication\n\n    site.auth({\n      username: 'admin',\n      password: 'securepass55'\n    })...",
                " Cookie/Nonce Authentication\n\n    site.auth({\n      nonce: 'somenonce'\n    })..."
            ],
            "itemtype": "method",
            "name": "auth",
            "chainable": 1,
            "params": [
                {
                    "name": "credentials",
                    "description": "An authentication credentials object",
                    "type": "Object",
                    "props": [
                        {
                            "name": "username",
                            "description": "A WP-API Basic HTTP Authentication username",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "password",
                            "description": "A WP-API Basic HTTP Authentication password",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "nonce",
                            "description": "A WP nonce for use with cookie authentication",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The WPAPI site handler instance, for chaining",
                "type": "WPAPI"
            },
            "class": "WPAPI",
            "module": "WPAPI"
        },
        {
            "file": "wpapi.js",
            "line": 293,
            "description": "Deduce request methods from a provided API root JSON response object's\nroutes dictionary, and assign those methods to the current instance. If\nno routes dictionary is provided then the instance will be bootstrapped\nwith route handlers for the default API endpoints only.\n\nThis method is called automatically during WPAPI instance creation.",
            "itemtype": "method",
            "name": "bootstrap",
            "chainable": 1,
            "params": [
                {
                    "name": "routes",
                    "description": "The \"routes\" object from the JSON object returned\n                       from the root API endpoint of a WP site, which should\n                       be a dictionary of route definition objects keyed by\n                       the route's regex pattern",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The bootstrapped WPAPI client instance (for chaining or assignment)",
                "type": "WPAPI"
            },
            "class": "WPAPI",
            "module": "WPAPI"
        },
        {
            "file": "wpapi.js",
            "line": 358,
            "description": "Access API endpoint handlers from a particular API namespace object",
            "example": [
                "\n\n    wp.namespace( 'myplugin/v1' ).author()...\n\n    // Default WP endpoint handlers are assigned to the wp instance itself.\n    // These are equivalent:\n    wp.namespace( 'wp/v2' ).posts()...\n    wp.posts()..."
            ],
            "params": [
                {
                    "name": "namespace",
                    "description": "A namespace string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object of route endpoint handler methods for the\nroutes within the specified namespace",
                "type": "Object"
            },
            "class": "WPAPI",
            "module": "WPAPI"
        },
        {
            "file": "wpapi.js",
            "line": 381,
            "description": "Take an arbitrary WordPress site, deduce the WP REST API root endpoint, query\nthat endpoint, and parse the response JSON. Use the returned JSON response\nto instantiate a WPAPI instance bound to the provided site.",
            "itemtype": "method",
            "name": "discover",
            "static": 1,
            "params": [
                {
                    "name": "url",
                    "description": "A URL within a REST API-enabled WordPress website",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise that resolves to a configured WPAPI instance bound\nto the deduced endpoint, or rejected if an endpoint is not found or the\nlibrary is unable to parse the provided endpoint.",
                "type": "Promise"
            },
            "class": "WPAPI",
            "module": "WPAPI"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/constructors/wp-request.js:166"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/constructors/wp-request.js:316"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/constructors/wp-request.js:620"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/data/simplify-object.js:5"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mixins/filters.js:121"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mixins/filters.js:134"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mixins/filters.js:167"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mixins/filters.js:180"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mixins/parameters.js:95"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mixins/parameters.js:105"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/mixins/parameters.js:120"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/util/apply-mixin.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/util/argument-is-numeric.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/util/object-reduce.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/util/parameter-setter.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/util/parameter-setter.js:10"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/endpoint-factories.js:12"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/http-transport.js:55"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/http-transport.js:81"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/path-part-setter.js:3"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/resource-handler-spec.js:71"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/route-tree.js:7"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/route-tree.js:128"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/route-tree.js:180"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib/wp-register-route.js:11"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " wpapi.js:95"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " wpapi.js:358"
        },
        {
            "message": "Missing item type",
            "line": " lib/constructors/wp-request.js:97"
        },
        {
            "message": "Missing item type\nProcess arrays of taxonomy terms into query parameters.\nAll terms listed in the arrays will be required (AND behavior).\n\nThis method will not be called with any values unless we are handling\nan endpoint with the filter mixin; however, since parameter handling\n(and therefore `_renderQuery()`) are part of WPRequest itself, this\nhelper method lives here alongside the code where it is used.",
            "line": " lib/constructors/wp-request.js:102"
        },
        {
            "message": "Missing item type\nReturn an object with any properties with undefined, null or empty string\nvalues removed.",
            "line": " lib/constructors/wp-request.js:139"
        },
        {
            "message": "Missing item type\nAssert whether a provided URL component is \"valid\" by checking it against\nan array of registered path component validator methods for that level of\nthe URL path.",
            "line": " lib/constructors/wp-request.js:166"
        },
        {
            "message": "Missing item type\nWalk through the keys and values of a provided object, removing any properties\nwhich would be inessential to the generation of the route tree used to deduce\nroute handlers from a `wp-json/` root API endpoint. This module is not used by\nthe wpapi module itself, but is rather a dependency of the script that is used\nto create the `endpoint-response.json` file that is shipped along with this\nmodule for use in generating the \"default\" routes.",
            "line": " lib/data/simplify-object.js:5"
        },
        {
            "message": "Missing item type\nTo avoid requiring that auto-discovery be utilized every time the API client\nis initialized, this library ships with a built-in route definition from a\nvanilla WordPress REST API installation. That file may be updated by\ninstalling the API plugin on a clean WP development instance, with no other\nplugins running, and downloading the JSON output from `yourwpsite.com/wp-json/`\ninto the \"default-routes.json\" file in this directory.\n\nThat file can also be generated by running this script against the same live\nWP REST API instance to download that same file, the difference being that,\nif the `default-routes.json` file is downloaded through this script, it\nwill be run through the `simplifyObject` utility to cut out about 1/3 of the\nbytes of the response by removing properties that do not effect route generation.\n\nThis script is NOT intended to be a dependency of any part of wp.js, and is\nprovided purely as a utility for upgrading the built-in copy of the endpoint\nresponse JSON file that is used to bootstrap the default route handlers.",
            "line": " lib/data/update-default-routes-json.js:6"
        },
        {
            "message": "Missing item type\nThis module defines a mapping between supported GET request query parameter\narguments and their corresponding mixin, if available.",
            "line": " lib/mixins/index.js:1"
        },
        {
            "message": "Missing item type",
            "line": " lib/mixins/index.js:21"
        },
        {
            "message": "Missing item type",
            "line": " lib/mixins/index.js:29"
        },
        {
            "message": "Missing item type",
            "line": " lib/mixins/index.js:38"
        },
        {
            "message": "Missing item type\nUtility function for sorting arrays of numbers or strings.",
            "line": " lib/util/alphanumeric-sort.js:3"
        },
        {
            "message": "Missing item type\nAugment an object (specifically a prototype) with a mixin method\n(the provided object is mutated by reference)",
            "line": " lib/util/apply-mixin.js:3"
        },
        {
            "message": "Missing item type\nReturn true if the provided argument is a number, a numeric string, or an\narray of numbers or numeric strings",
            "line": " lib/util/argument-is-numeric.js:3"
        },
        {
            "message": "Missing item type\nVerify that a specific HTTP method is supported by the provided WPRequest",
            "line": " lib/util/check-method-support.js:3"
        },
        {
            "message": "Missing item type\nRegular Expression to identify a capture group in PCRE formats\n`(?<name>regex)`, `(?'name'regex)` or `(?P<name>regex)` (see\nregular-expressions.info/refext.html); RegExp is built as a string\nto enable more detailed annotation.",
            "line": " lib/util/named-group-regexp.js:3"
        },
        {
            "message": "Missing item type\nHelper to create a simple parameter setter convenience method",
            "line": " lib/util/parameter-setter.js:3"
        },
        {
            "message": "Missing item type\nA setter for a specific parameter",
            "line": " lib/util/parameter-setter.js:10"
        },
        {
            "message": "Missing item type\nGiven an array of route definitions and a specific namespace for those routes,\nrecurse through the node tree representing all possible routes within the\nprovided namespace to define path value setters (and corresponding property\nvalidators) for all possible variants of each resource's API endpoints.",
            "line": " lib/endpoint-factories.js:12"
        },
        {
            "message": "Missing item type\nCombine the API endpoint root URI and link URI into a valid request URL.\nEndpoints are generally a full path to the JSON API's root endpoint, such\nas `website.com/wp-json`: the link headers, however, are returned as root-\nrelative paths. Concatenating these would generate a URL such as\n`website.com/wp-json/wp-json/posts?page=2`: we must intelligently merge the\nURI strings in order to generate a valid new request URL.",
            "line": " lib/http-transport.js:55"
        },
        {
            "message": "Missing item type\nIf the response is not paged, return the body as-is. If pagination\ninformation is present in the response headers, parse those headers into\na custom `_paging` property on the response body. `_paging` contains links\nto the previous and next pages in the collection, as well as metadata\nabout the size and number of pages in the collection.\n\nThe structure of the `_paging` property is as follows:\n\n- `total` {Integer} The total number of records in the collection\n- `totalPages` {Integer} The number of pages available\n- `links` {Object} The parsed \"links\" headers, separated into individual URI strings\n- `next` {WPRequest} A WPRequest object bound to the \"next\" page (if page exists)\n- `prev` {WPRequest} A WPRequest object bound to the \"previous\" page (if page exists)",
            "line": " lib/http-transport.js:81"
        },
        {
            "message": "Missing item type\nSubmit the provided superagent request object, invoke a callback (if it was\nprovided), and return a promise to the response from the HTTP request.",
            "line": " lib/http-transport.js:146"
        },
        {
            "message": "Missing item type\nExtract and return the headers property from a superagent response object",
            "line": " lib/http-transport.js:212"
        },
        {
            "message": "Missing item type\nReturn a function to set part of the request URL path.\n\nPath part setter methods may be either dynamic (*i.e.* may represent a\n\"named group\") or non-dynamic (representing a static part of the URL, which\nis usually a collection endpoint of some sort). Which type of function is\nreturned depends on whether a given route has one or many sub-resources.",
            "line": " lib/path-part-setter.js:3"
        },
        {
            "message": "Missing item type\nSet a dymanic (named-group) path part of a query URL.",
            "line": " lib/path-part-setter.js:30"
        },
        {
            "message": "Missing item type\nSet a non-dymanic (non-named-group) path part of a query URL, and\nset the value of a subresource if an input value is provided and\nexactly one named-group child node exists.",
            "line": " lib/path-part-setter.js:51"
        },
        {
            "message": "Missing item type\nWalk the tree of a specific resource node to create the setter methods\n\nThe API we want to produce from the node tree looks like this:\n\n    wp.posts();                        /wp/v2/posts\n    wp.posts().id( 7 );                /wp/v2/posts/7\n    wp.posts().id( 7 ).revisions();    /wp/v2/posts/7/revisions\n    wp.posts().id( 7 ).revisions( 8 ); /wp/v2/posts/7/revisions/8\n\n^ That last one's the tricky one: we can deduce that this parameter is \"id\", but\nthat param will already be taken by the post ID, so sub-collections have to be\nset up as `.revisions()` to get the collection, and `.revisions( id )` to get a\nspecific resource.",
            "line": " lib/resource-handler-spec.js:40"
        },
        {
            "message": "Missing item type\nCreate a node handler specification object from a route definition object",
            "line": " lib/resource-handler-spec.js:71"
        },
        {
            "message": "Missing item type\nMethod to use when reducing route components array.",
            "line": " lib/route-tree.js:7"
        },
        {
            "message": "Missing item type",
            "line": " lib/route-tree.js:128"
        },
        {
            "message": "Missing item type\nThe Gruntfile in this project is not responsible for the code build or\nlinting, and instead handles all tasks related to documentation generation\nand output.",
            "line": " Gruntfile.js:1"
        },
        {
            "message": "Missing item type\nSet custom transport methods to use when making HTTP requests against the API\n\nPass an object with a function for one or many of \"get\", \"post\", \"put\",\n\"delete\" and \"head\" and that function will be called when making that type\nof request. The provided transport functions should take a WPRequest handler\ninstance (_e.g._ the result of a `wp.posts()...` chain or any other chaining\nrequest handler) as their first argument; a `data` object as their second\nargument (for POST, PUT and DELETE requests); and an optional callback as\ntheir final argument. Transport methods should invoke the callback with the\nresponse data (or error, as appropriate), and should also return a Promise.",
            "line": " wpapi.js:95"
        },
        {
            "message": "Missing item type\nAccess API endpoint handlers from a particular API namespace object",
            "line": " wpapi.js:358"
        }
    ]
}